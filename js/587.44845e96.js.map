{"version":3,"file":"js/587.44845e96.js","mappings":"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","sources":["webpack://3d-space/./src/components/UIKIt/A3DModelCover.vue","webpack://3d-space/./src/components/UIKIt/A3DModelCover.vue?ddd5","webpack://3d-space/./src/components/UIKIt/A3DModelDetail.vue","webpack://3d-space/./src/components/UIKIt/A3DModelDetail.vue?d23d"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"model-cover_wrap\"\r\n  />\r\n  <canvas class=\"model-cover\" ref=\"canvasRef\"></canvas>\r\n</template>\r\n\r\n<script setup>\r\n  const props = defineProps({\r\n    name: String,\r\n    slice: Number,\r\n  })\r\n// import * as THREE from 'three';\r\n// import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n// import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\n\r\n// let scene = new THREE.Scene();\r\n// let camera  = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n// camera.position.z = 10;\r\n\r\n// let renderer = new THREE.WebGLRenderer({alpha: true, antialias: true});\r\n// renderer.setClearColor(0x000000, 0);\r\n// renderer.setSize(1280, 720);\r\n\r\n// renderer.domElement.setAttribute(\"id\", \"3dModelDomEl\");\r\n// document.body.insertBefore(renderer.domElement, document.body.firstChild);\r\n\r\n// const aLight = new THREE.AmbientLight(0x404040, 1.2);\r\n// scene.add(aLight);\r\n\r\n// const pLight = new THREE.PointLight(0xFFFFFF, 1.2);\r\n// pLight.position.set(0, -3, 7);\r\n// scene.add(pLight);\r\n\r\n// let loader = new THREE.GLTFLoader();\r\n// let obj = null;\r\n\r\n// loader.load(\"../../assets/3dModels/Main/scene.gltf\", function(gltf) {\r\n//   obj = gltf;\r\n//   obj.scene.scale.set(1.3, 1.3, 1.3);\r\n\r\n//   scene.add(obj.scene);\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // import * as THREE from \"three\";\r\n  // import { onMounted, onUnmounted, ref, render } from \"vue\";\r\n\r\n  // let SCENE;\r\n  // let CAMERA;\r\n  // let RENDERER;\r\n  // let LOADING_MANAGER;\r\n  // let IMAGE_LOADER;\r\n  // let OBJ_LOADER;\r\n  // let CONTROLS;\r\n  // let MOUSE;\r\n  // let RAYCASTER;\r\n\r\n  // let TEXTURE;\r\n  // let OBJECT;\r\n\r\n  // function initScene() {\r\n  //   SCENE = new THREE.Scene();\r\n\r\n  //   initLights();\r\n  // }\r\n\r\n  // function initLights() {\r\n  //   const ambient = new THREE.AmbientLight(0xffffff, 0.7);\r\n  //   SCENE.add(ambient);\r\n\r\n  //   const directionalLight = new THREE.DirectionalLight(0xffffff);\r\n  //   directionalLight.position.set(0, 1, 1);\r\n  //   SCENE.add(directionalLight);\r\n  // }\r\n\r\n  // function initCamera() {\r\n  //   CAMERA = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 2000);\r\n  //   CAMERA.position.z = 100;\r\n  // }\r\n\r\n  // function initRenderer() {\r\n  //   RENDERER = new THREE.WebGLRenderer({ alpha: true });\r\n  //   RENDERER.setPixelRatio(window.devicePixelRatio);\r\n  //   RENDERER.setSize(window.innerWidth, window.innerHeight);\r\n  // }\r\n\r\n  // function initLoaders() {\r\n  //   LOADING_MANAGER = new THREE.LoadingManager();\r\n  //   IMAGE_LOADER = new THREE.ImageLoader(LOADING_MANAGER);\r\n  //   OBJ_LOADER = new THREE.OBJLoader(LOADING_MANAGER);\r\n  // }\r\n\r\n  // function loadModel() {\r\n  //   OBJ_LOADER.load('./model.obj', (object) => {\r\n  //       object.scale.x = 0.3;\r\n  //       object.scale.y = 0.3;\r\n  //       object.scale.z = 0.3;\r\n  //       object.rotation.x = -Math.PI / 2;\r\n  //       object.position.y = -30;\r\n\r\n  //       OBJECT = object;\r\n  //       SCENE.add(OBJECT);\r\n  //   });\r\n  // }\r\n\r\n  // function animate() {\r\n  //   requestAnimationFrame(animate);\r\n  //   render();\r\n  // }\r\n\r\n  // function render() {\r\n  //   CAMERA.lookAt(SCENE.position);\r\n\r\n  //   RENDERER.render(SCENE, CAMERA);\r\n  // }\r\n\r\n  // function initEventListeners() {\r\n  //   window.addEventListener('resize', onWindowResize);\r\n\r\n  //   onWindowResize();\r\n  // }\r\n\r\n  // function onWindowResize() {\r\n  //   CAMERA.aspect = window.innerWidth / window.innerHeight;\r\n  //   CAMERA.updateProjectionMatrix();\r\n\r\n  //   RENDERER.setSize(window.innerWidth, window.innerHeight);\r\n  // }\r\n\r\n  // function initTexture() {\r\n  //   TEXTURE = new THREE.Texture();\r\n  // }\r\n\r\n  // function loadTexture() {\r\n  //   IMAGE_LOADER.load('./texture.jpg', (image) => {\r\n  //       TEXTURE.image = image;\r\n  //       TEXTURE.needsUpdate = true;\r\n  //   });\r\n  // }\r\n\r\n\r\n  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n  import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n  import { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\r\n  import * as THREE from \"three\";\r\n  import { onMounted, onUnmounted, ref, render } from \"vue\";\r\n\r\n  let scene = new THREE.Scene();\r\n  let renderer;\r\n  let controls;\r\n\r\n  let shownModel;\r\n  let loadedModel;\r\n  let modelName = props.name;\r\n\r\n  let canvasRef = ref();\r\n\r\n  // let boxGeometry = new THREE.BoxGeometry(1, 1, 1);\r\n  // let boxMaterial = new THREE.MeshStandardMaterial({ color: \"mediumpurple\" });\r\n  // let box = new THREE.Mesh(boxGeometry, boxMaterial);\r\n  // box.position.set(0, 0, -2);\r\n\r\n  // scene.add(box);\r\n\r\n  let ambientLight = new  THREE.AmbientLight(\"#FFFFFF\", 1);\r\n  scene.add(ambientLight);\r\n\r\n  let camera = new THREE.PerspectiveCamera(\r\n    75,\r\n    600 / 600,\r\n    0.1,\r\n    100\r\n  );\r\n  camera.position.y=10;\r\n  camera.position.z=20;\r\n  camera.position.x=20;\r\n\r\n  camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n  scene.add(camera);\r\n\r\n  let loop = () => {\r\n    // box.rotation.y += 0.02;\r\n\r\n    controls.update();\r\n    renderer.render(scene, camera);\r\n  };\r\n\r\n  let resizeCallback = () => {\r\n    // renderer.setSize(600, 600);\r\n\r\n    camera.aspect = 600 / 600;\r\n    camera.updateProjectionMatrix();\r\n  }\r\n\r\n  onMounted(() =>{\r\n    renderer = new THREE.WebGLRenderer({\r\n      canvas: canvasRef.value,\r\n      antialias: true,\r\n      alpha: true,\r\n    });\r\n\r\n    renderer.setSize(300, 300);\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.render(scene, camera);\r\n    renderer.xr.enabled = true;\r\n\r\n    renderer.setAnimationLoop(loop);\r\n\r\n    controls = new OrbitControls(camera, canvasRef.value);\r\n    controls.enabledDamping = true;\r\n\r\n    const gltfLoader = new GLTFLoader();\r\n    let dracoLoader = new DRACOLoader();\r\n    dracoLoader.setDecoderPath(\"/draco/\");\r\n    gltfLoader.setDRACOLoader(dracoLoader);\r\n\r\n    gltfLoader.load(`/models/${modelName}.gltf`, (gltf) => {\r\n    // gltfLoader.load(`../../assets/3dModels/Main/scene.gltf`, (gltf) => {\r\n      loadedModel = gltf.scene.children[0];\r\n\r\n      shownModel = loadedModel.clone();\r\n      shownModel.name = modelName;\r\n      const scaleModel = props.slice;\r\n      shownModel.scale.set(scaleModel, scaleModel, scaleModel);\r\n      scene.add(shownModel);\r\n    })\r\n\r\n    window.addEventListener(\"resize\", resizeCallback);\r\n  })\r\n\r\n  onUnmounted(() => {\r\n    renderer.setAnimationLoop(null);\r\n    window.removeEventListener(\"resize\", resizeCallback);\r\n  })\r\n\r\n\r\n\r\n  // import * as THREE from \"three\";\r\n  // import { onMounted, onUnmounted, ref, render } from \"vue\";\r\n  \r\n  // let scene = new THREE.Scene();\r\n  // let renderer;\r\n  // let canvasRef = ref();\r\n\r\n  // let boxGeometry = new THREE.BoxGeometry(1, 1, 1);\r\n  // let boxMaterial = new THREE.MeshStandardMaterial({ color: \"mediumpurple\" });\r\n  // let box = new THREE.Mesh(boxGeometry, boxMaterial);\r\n  // box.position.set(0, 0, -2);\r\n\r\n  // scene.add(box);\r\n\r\n  // let ambientLight = new  THREE.AmbientLight(\"#FFFFFF\", 1);\r\n  // scene.add(ambientLight);\r\n\r\n  // let camera = new THREE.PerspectiveCamera(\r\n  //   75,\r\n  //   600 / 600,\r\n  //   0.1,\r\n  //   100\r\n  // );\r\n  // camera.position.y=1;\r\n  // camera.position.z=2;\r\n  // camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n  // scene.add(camera);\r\n\r\n  // // let loop = () => {\r\n  // //   box.rotation.y += 0.02;\r\n  // //   renderer.render(scene, camera);\r\n  // //   requestAnimationFrame(loop);\r\n  // // };\r\n\r\n  // let loop = () => {\r\n  //   box.rotation.y += 0.02;\r\n  //   renderer.render(scene, camera);\r\n  // };\r\n\r\n  // // let resizeCallback = () => {\r\n  // //   renderer.setSize()\r\n  // // }\r\n\r\n  // onMounted(() =>{\r\n  //   renderer = new THREE.WebGLRenderer({\r\n  //     canvas: canvasRef.value,\r\n  //     antialias: true,\r\n  //     alpha: true,\r\n  //   });\r\n\r\n  //   renderer.setSize(640, 640);\r\n  //   renderer.setPixelRatio(window.devicePixelRatio);\r\n  //   renderer.render(scene, camera);\r\n    \r\n  //   // requestAnimationFrame(loop);\r\n  //   renderer.setAnimationLoop(loop);\r\n  // })\r\n\r\n  // onUnmounted(() => {\r\n  //   renderer.setAnimationLoop(null);\r\n  // })\r\n</script>\r\n\r\n<style scoped>\r\n.model-cover {\r\n}\r\n.model-cover_wrap {\r\n  height: 300px;\r\n  width: 398px;\r\n  opacity: 1;\r\n  margin: auto;\r\n  position: absolute;\r\n}\r\n</style>\r\n","import script from \"./A3DModelCover.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./A3DModelCover.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./A3DModelCover.vue?vue&type=style&index=0&id=7b7e35ae&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\3DSpace\\\\3d-space\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7b7e35ae\"]])\n\nexport default __exports__","<template>\r\n  <canvas class=\"model-cover\" ref=\"canvasRef\"></canvas>\r\n</template>\r\n\r\n<script setup>\r\n  const props = defineProps({\r\n    name: String,\r\n    slice: Number,\r\n  })\r\n// import * as THREE from 'three';\r\n// import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n// import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\n\r\n// let scene = new THREE.Scene();\r\n// let camera  = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n// camera.position.z = 10;\r\n\r\n// let renderer = new THREE.WebGLRenderer({alpha: true, antialias: true});\r\n// renderer.setClearColor(0x000000, 0);\r\n// renderer.setSize(1280, 720);\r\n\r\n// renderer.domElement.setAttribute(\"id\", \"3dModelDomEl\");\r\n// document.body.insertBefore(renderer.domElement, document.body.firstChild);\r\n\r\n// const aLight = new THREE.AmbientLight(0x404040, 1.2);\r\n// scene.add(aLight);\r\n\r\n// const pLight = new THREE.PointLight(0xFFFFFF, 1.2);\r\n// pLight.position.set(0, -3, 7);\r\n// scene.add(pLight);\r\n\r\n// let loader = new THREE.GLTFLoader();\r\n// let obj = null;\r\n\r\n// loader.load(\"../../assets/3dModels/Main/scene.gltf\", function(gltf) {\r\n//   obj = gltf;\r\n//   obj.scene.scale.set(1.3, 1.3, 1.3);\r\n\r\n//   scene.add(obj.scene);\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // import * as THREE from \"three\";\r\n  // import { onMounted, onUnmounted, ref, render } from \"vue\";\r\n\r\n  // let SCENE;\r\n  // let CAMERA;\r\n  // let RENDERER;\r\n  // let LOADING_MANAGER;\r\n  // let IMAGE_LOADER;\r\n  // let OBJ_LOADER;\r\n  // let CONTROLS;\r\n  // let MOUSE;\r\n  // let RAYCASTER;\r\n\r\n  // let TEXTURE;\r\n  // let OBJECT;\r\n\r\n  // function initScene() {\r\n  //   SCENE = new THREE.Scene();\r\n\r\n  //   initLights();\r\n  // }\r\n\r\n  // function initLights() {\r\n  //   const ambient = new THREE.AmbientLight(0xffffff, 0.7);\r\n  //   SCENE.add(ambient);\r\n\r\n  //   const directionalLight = new THREE.DirectionalLight(0xffffff);\r\n  //   directionalLight.position.set(0, 1, 1);\r\n  //   SCENE.add(directionalLight);\r\n  // }\r\n\r\n  // function initCamera() {\r\n  //   CAMERA = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 2000);\r\n  //   CAMERA.position.z = 100;\r\n  // }\r\n\r\n  // function initRenderer() {\r\n  //   RENDERER = new THREE.WebGLRenderer({ alpha: true });\r\n  //   RENDERER.setPixelRatio(window.devicePixelRatio);\r\n  //   RENDERER.setSize(window.innerWidth, window.innerHeight);\r\n  // }\r\n\r\n  // function initLoaders() {\r\n  //   LOADING_MANAGER = new THREE.LoadingManager();\r\n  //   IMAGE_LOADER = new THREE.ImageLoader(LOADING_MANAGER);\r\n  //   OBJ_LOADER = new THREE.OBJLoader(LOADING_MANAGER);\r\n  // }\r\n\r\n  // function loadModel() {\r\n  //   OBJ_LOADER.load('./model.obj', (object) => {\r\n  //       object.scale.x = 0.3;\r\n  //       object.scale.y = 0.3;\r\n  //       object.scale.z = 0.3;\r\n  //       object.rotation.x = -Math.PI / 2;\r\n  //       object.position.y = -30;\r\n\r\n  //       OBJECT = object;\r\n  //       SCENE.add(OBJECT);\r\n  //   });\r\n  // }\r\n\r\n  // function animate() {\r\n  //   requestAnimationFrame(animate);\r\n  //   render();\r\n  // }\r\n\r\n  // function render() {\r\n  //   CAMERA.lookAt(SCENE.position);\r\n\r\n  //   RENDERER.render(SCENE, CAMERA);\r\n  // }\r\n\r\n  // function initEventListeners() {\r\n  //   window.addEventListener('resize', onWindowResize);\r\n\r\n  //   onWindowResize();\r\n  // }\r\n\r\n  // function onWindowResize() {\r\n  //   CAMERA.aspect = window.innerWidth / window.innerHeight;\r\n  //   CAMERA.updateProjectionMatrix();\r\n\r\n  //   RENDERER.setSize(window.innerWidth, window.innerHeight);\r\n  // }\r\n\r\n  // function initTexture() {\r\n  //   TEXTURE = new THREE.Texture();\r\n  // }\r\n\r\n  // function loadTexture() {\r\n  //   IMAGE_LOADER.load('./texture.jpg', (image) => {\r\n  //       TEXTURE.image = image;\r\n  //       TEXTURE.needsUpdate = true;\r\n  //   });\r\n  // }\r\n\r\n\r\n  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n  import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n  import { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\r\n  import * as THREE from \"three\";\r\n  import { onMounted, onUnmounted, ref, render } from \"vue\";\r\n\r\n  let scene = new THREE.Scene();\r\n  let renderer;\r\n  let controls;\r\n\r\n  let shownModel;\r\n  let loadedModel;\r\n  let modelName = props.name;\r\n\r\n  let canvasRef = ref();\r\n\r\n  // let boxGeometry = new THREE.BoxGeometry(1, 1, 1);\r\n  // let boxMaterial = new THREE.MeshStandardMaterial({ color: \"mediumpurple\" });\r\n  // let box = new THREE.Mesh(boxGeometry, boxMaterial);\r\n  // box.position.set(0, 0, -2);\r\n\r\n  // scene.add(box);\r\n\r\n  let ambientLight = new  THREE.AmbientLight(\"#FFFFFF\", 1);\r\n  scene.add(ambientLight);\r\n\r\n  let camera = new THREE.PerspectiveCamera(\r\n    75,\r\n    600 / 600,\r\n    0.1,\r\n    100\r\n  );\r\n  camera.position.y=10;\r\n  camera.position.z=20;\r\n  camera.position.x=20;\r\n\r\n  camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n  scene.add(camera);\r\n\r\n  let loop = () => {\r\n    // box.rotation.y += 0.02;\r\n\r\n    controls.update();\r\n    renderer.render(scene, camera);\r\n  };\r\n\r\n  let resizeCallback = () => {\r\n    // renderer.setSize(600, 600);\r\n\r\n    camera.aspect = 600 / 600;\r\n    camera.updateProjectionMatrix();\r\n  }\r\n\r\n  onMounted(() =>{\r\n    renderer = new THREE.WebGLRenderer({\r\n      canvas: canvasRef.value,\r\n      antialias: true,\r\n      alpha: true,\r\n    });\r\n\r\n    renderer.setSize(900, 900);\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.render(scene, camera);\r\n    renderer.xr.enabled = true;\r\n\r\n    renderer.setAnimationLoop(loop);\r\n\r\n    controls = new OrbitControls(camera, canvasRef.value);\r\n    controls.enabledDamping = true;\r\n\r\n    const gltfLoader = new GLTFLoader();\r\n    let dracoLoader = new DRACOLoader();\r\n    dracoLoader.setDecoderPath(\"/draco/\");\r\n    gltfLoader.setDRACOLoader(dracoLoader);\r\n\r\n    gltfLoader.load(`/models/${modelName}.gltf`, (gltf) => {\r\n    // gltfLoader.load(`../../assets/3dModels/Main/scene.gltf`, (gltf) => {\r\n      loadedModel = gltf.scene.children[0];\r\n\r\n      shownModel = loadedModel.clone();\r\n      shownModel.name = modelName;\r\n      const scaleModel = props.slice;\r\n      shownModel.scale.set(scaleModel, scaleModel, scaleModel);\r\n      scene.add(shownModel);\r\n    })\r\n\r\n    window.addEventListener(\"resize\", resizeCallback);\r\n  })\r\n\r\n  onUnmounted(() => {\r\n    renderer.setAnimationLoop(null);\r\n    window.removeEventListener(\"resize\", resizeCallback);\r\n  })\r\n\r\n\r\n\r\n  // import * as THREE from \"three\";\r\n  // import { onMounted, onUnmounted, ref, render } from \"vue\";\r\n  \r\n  // let scene = new THREE.Scene();\r\n  // let renderer;\r\n  // let canvasRef = ref();\r\n\r\n  // let boxGeometry = new THREE.BoxGeometry(1, 1, 1);\r\n  // let boxMaterial = new THREE.MeshStandardMaterial({ color: \"mediumpurple\" });\r\n  // let box = new THREE.Mesh(boxGeometry, boxMaterial);\r\n  // box.position.set(0, 0, -2);\r\n\r\n  // scene.add(box);\r\n\r\n  // let ambientLight = new  THREE.AmbientLight(\"#FFFFFF\", 1);\r\n  // scene.add(ambientLight);\r\n\r\n  // let camera = new THREE.PerspectiveCamera(\r\n  //   75,\r\n  //   600 / 600,\r\n  //   0.1,\r\n  //   100\r\n  // );\r\n  // camera.position.y=1;\r\n  // camera.position.z=2;\r\n  // camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n  // scene.add(camera);\r\n\r\n  // // let loop = () => {\r\n  // //   box.rotation.y += 0.02;\r\n  // //   renderer.render(scene, camera);\r\n  // //   requestAnimationFrame(loop);\r\n  // // };\r\n\r\n  // let loop = () => {\r\n  //   box.rotation.y += 0.02;\r\n  //   renderer.render(scene, camera);\r\n  // };\r\n\r\n  // // let resizeCallback = () => {\r\n  // //   renderer.setSize()\r\n  // // }\r\n\r\n  // onMounted(() =>{\r\n  //   renderer = new THREE.WebGLRenderer({\r\n  //     canvas: canvasRef.value,\r\n  //     antialias: true,\r\n  //     alpha: true,\r\n  //   });\r\n\r\n  //   renderer.setSize(640, 640);\r\n  //   renderer.setPixelRatio(window.devicePixelRatio);\r\n  //   renderer.render(scene, camera);\r\n    \r\n  //   // requestAnimationFrame(loop);\r\n  //   renderer.setAnimationLoop(loop);\r\n  // })\r\n\r\n  // onUnmounted(() => {\r\n  //   renderer.setAnimationLoop(null);\r\n  // })\r\n</script>\r\n\r\n<style scoped>\r\n.model-cover {\r\n}\r\n</style>\r\n","import script from \"./A3DModelDetail.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./A3DModelDetail.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./A3DModelDetail.vue?vue&type=style&index=0&id=0e646c61&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\3DSpace\\\\3d-space\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-0e646c61\"]])\n\nexport default __exports__"],"names":["renderer","controls","shownModel","loadedModel","scene","THREE","modelName","props","name","canvasRef","ref","ambientLight","add","camera","position","y","z","x","lookAt","loop","update","render","resizeCallback","aspect","updateProjectionMatrix","onMounted","canvas","value","antialias","alpha","setSize","setPixelRatio","window","devicePixelRatio","xr","enabled","setAnimationLoop","OrbitControls","enabledDamping","gltfLoader","GLTFLoader","dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","load","gltf","children","clone","scaleModel","slice","scale","set","addEventListener","onUnmounted","removeEventListener","__exports__"],"sourceRoot":""}